plugin_configs:
  yadageworkflow:
      #this is generic info on yadage workflows, what result files are relevant for RECAST
      #and how to load them into true RECAST format (adapters...)
      results:
        - workflow: 'from-github/trivial_recast:rootflow.yml'
          results:
            - 'recast/recast.json'
          recastresult:
            adapter: recastbackend.recastadapters:standard_result
            jsonfilepath: 'recast/recast.json'
        - workflow: from-github/phenochain/checkmate_workflow:workflow.yml
          results:
            - 'format_results/limits.json'
          recastresult:
            adapter: recastbackend.recastadapters:standard_result
            jsonfilepath: 'format_results/limits.json'
            force_float: true
        - workflow: 'from-github/pseudocap:ewk_analyses/ewkdilepton_analysis/ewk_dilepton_recast_workflow.yml'
          results:
            - 'histfitprepare/out.yield'
            - 'histfitprepare/out.root'
            - 'fit/fit.tgz'
            - 'postproc/results.yaml'
          recastresult:
            adapter: recastbackend.recastadapters:pMSSMFormat_BestSR
            yamlfilepath: postproc/results.yaml
        - workflow: 'from-github/pseudocap/multibjet_run2:workflow.yml'
          results:
            - 'fit/fitoutput.json'
          recastresult:
            adapter: recastbackend.recastadapters:standard_result
            jsonfilepath: fit/fitoutput.json
        - workflow: 'from-github/phenoana/generic_rivet:rivetanflow.yml'
          results:
            - 'rivet/output.yoda'
          recastresult:
            adapter: recastbackend.recastadapters:null_result
        - workflow: 'from-github/phenochain/checkmate_workflow:analysis_flow.yml'
          results:
            - 'format_results/limits.json'
          recastresult:
            adapter: recastbackend.recastadapters:standard_result
            jsonfilepath: 'format_results/limits.json'
            force_float: true

        - workflow: 'from-github/recast_analyses/delphes_analysis:analysis_flow.yml'
          results:
            - 'fit/fitresult.json'
          recastresult:
            adapter: recastbackend.recastadapters:null_result

        - workflow: 'from-github/recast_analyses/atlas_derivation_analysis:analysis_workflow.yml'
          results:
            - 'plot/plot.pdf'
          recastresult:
            adapter: recastbackend.recastadapters:null_result

recast_wflowconfigs:
  #this is a list of full stack end-to-end workflows that take the raw RECAST request and 
  #are able to go all the way to a RECAST result..
  - analysisid: 1
    configname: dummyconfig
    wflowplugin: yadageworkflow
    config:
      toplevel: from-github/trivial_recast
      workflow: rootflow.yml
  - analysisid: 2
    configname: stopcheckmate
    wflowplugin: yadageworkflow
    config:
      toplevel: from-github/phenochain/checkmate_workflow
      workflow: workflow.yml
      preset_pars:
        analysis: atlas_conf_2013_047
  - analysisid: 3
    configname: 'atlas_ewksusy_2l'
    wflowplugin: yadageworkflow
    config:
      toplevel: from-github/pseudocap
      workflow: ewk_analyses/ewkdilepton_analysis/ewk_dilepton_recast_workflow.yml
  - analysisid: 6
    configname: mbj_run2
    wflowplugin: yadageworkflow
    config:
      toplevel: from-github/pseudocap/multibjet_run2
      workflow: workflow.yml

recast_combo_workflows:
  #this is a list of combination workflows that split into a request-side and a analysis side
  #while negotiating an interface amongst themselves
  yadage_combos:
    #the above request-analysis split, explicitly for yadage
    upstream_configs:
      - configname: stops_herwig_nllfast
        analysis_interface: hepmc_with_xsec #the interface offered by this upstream .. a string..
        config:
          toplevel: from-github/phenochain/checkmate_workflow
          workflow: generation_flow.yml
          interface_parameters:
            xsecfile: {stages: 'upstream.[0].compute_xsec', output: xsecfile, unwrap: true}
            hepmcfile: {stages: 'upstream.[0].herwig', output: hepmcfile, unwrap: true}

      - configname: lhe_pythia_atlas_delphes
        analysis_interface: delphesroot_xsec #the interface offered by this upstream .. a string..
        config:
          toplevel: from-github/mcevgen/pythia_delphes
          workflow: workflow.yml
          interface_parameters: 
            rootfiles: {stages: 'upstream.[0].delphes', output: rootfile}
            xsec_in_pb: {stages: 'upstream.[0].init', output: xsec_in_pb, unwrap: true}

      - configname: lhe_atlas_fullchain_derivation
        analysis_interface: atlas_daod_xsec #the interface offered by this upstream .. a string..
        config:
          toplevel: https://raw.githubusercontent.com/lukasheinrich/xAOD-full-chain/master/yadage-defs
          workflow: parallel_lhe_nomerge.yml
          interface_parameters:
            daodfiles: {stages: 'upstream.[0].parallel.[*].derivation', output: daodfile}
            xsec_in_pb: {stages: 'upstream.[0].init', output: xsec_in_pb, unwrap: true}

    downstream_configs:
      - analysisid: 1
        configname: checkmate_atlas_conf_2013_024
        required_interface: hepmc_with_xsec 
        config:
          toplevel: from-github/phenochain/checkmate_workflow
          workflow: analysis_flow.yml
          preset_pars:
            analysis: atlas_conf_2013_024

      - analysisid: 3
        configname: delphesanalysis
        required_interface: delphesroot_xsec
        config:
          toplevel: from-github/recast_analyses/delphes_analysis
          workflow: analysis_flow.yml
          preset_pars:
              bgdata: /some/bg/data
              obsdata: /some/obs/data

      - analysisid: 3
        configname: derivation_analysis
        required_interface: atlas_daod_xsec
        config:
          toplevel: from-github/recast_analyses/atlas_derivation_analysis
          workflow: analysis_workflow.yml
          preset_pars: {}
